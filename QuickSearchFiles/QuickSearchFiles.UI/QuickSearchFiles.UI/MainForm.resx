<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAABiAAAA2gAA
        APYAAACxAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALgAA
        ANoAAAD/AAAA/wAAAP4AAACzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAA
        AEoAAAA+AAAAegAAAPQAAAD/AAAA/wAAAPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABPAAAA6AAAAMwAAAA9AAAAeAAAAPMAAAD/AAAA3gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAGAAAAKQAAAEYAAADWAAAA/wAAAMsAAAA+AAAAegAAAN4AAABoAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAFsAAADaAAAAcQAAAEUAAADUAAAA/wAAAM0AAABAAAAAMQAAAAgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAVAAAAwgAAAP8AAADvAAAAbwAAAEYAAADVAAAA8QAAAFgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIAAADZAAAA/wAAAP8AAADvAAAAbwAAAEgAAABcAAAABwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQAAALwAAAD/AAAA/wAAAP8AAADbAAAALAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAACsAAABNAAAAYAAA
        AGMAAABVAAAAOAAAABMAAAACAAAAAAAAAAAAAAAAAAAABQAAAAoAAABYAAAAzgAAAMAAAADcAAAAxgAA
        AGAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwAAAF4AAACyAAAA4QAA
        APcAAAD/AAAA/wAAAPsAAADqAAAAyQAAAIAAAAArAAAABQAAADcAAACfAAAAwwAAANIAAABdAAAAEQAA
        ACMAAAAXAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAD8AAAC5AAAA+AAA
        AP8AAADvAAAAzAAAALgAAAC0AAAAwQAAAOAAAAD8AAAA/gAAANoAAACvAAAAygAAAIoAAACHAAAAxAAA
        AAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABbAAAA4QAA
        AP8AAADfAAAAhgAAAEQAAAA8AAAAPgAAAD4AAAA+AAAAPQAAAGIAAAC+AAAA+QAAAP8AAADEAAAAIQAA
        AIUAAACkAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVAAA
        AOgAAAD9AAAArwAAAD0AAABPAAAAowAAANcAAADyAAAA9gAAAOUAAAC8AAAAdAAAADMAAAB3AAAA6QAA
        APwAAADDAAAAywAAADsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AC4AAADVAAAA/wAAAKMAAAAyAAAAkwAAAPIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD9AAAAyAAA
        AEgAAABfAAAA6QAAAP8AAACyAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAHAAAAlwAAAP8AAADBAAAAMgAAAKMAAADyAAAA5QAAAOMAAADjAAAA4wAAAOMAAADjAAAA4wAA
        AOMAAADsAAAA2wAAAEgAAAB2AAAA+wAAANsAAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAD0AAADlAAAA9AAAAFIAAAB5AAAA/gAAAIYAAAAjAAAALgAAAC4AAAAuAAAALgAA
        AC8AAAAvAAAAKgAAAD8AAADqAAAAyAAAADMAAAC8AAAA/wAAAIIAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAiAAAAP8AAAC3AAAAOQAAANwAAAD/AAAAZgAAAGwAAADXAAAAzgAA
        ANYAAADQAAAAzAAAANIAAAC3AAAALAAAAOAAAAD/AAAAdQAAAGAAAAD+AAAAygAAABUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADCAAAA/wAAAHgAAABoAAAA/gAAAP8AAABmAAAAhQAA
        ALoAAABWAAAA3wAAAIIAAAA0AAAAdQAAANMAAAAwAAAA3wAAAP8AAAC+AAAAPQAAAN8AAADrAAAAOwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOgAAAD4AAAATgAAAKAAAAD/AAAA/wAA
        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
        A/8AAAP/gAAH/8AAB//gAA//8AAf//gAf/8=
</value>
  </data>
</root>